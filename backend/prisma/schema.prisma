// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:admin@localhost:5432/moviebox"
}

model User {
  id        Int       @id @default(autoincrement())
  nombre    String
  apellidos    String?
  fechaNacimiento  DateTime?
  email     String    @unique
  peliculaFavorita String?
  usuario   String?
  password  String
  tipo      String     @default("usuario")
  conectado  Boolean   @default(false) // Estado de conexión
  imagen    String?    @db.Text   // URL de imagen
  reviews   Review[]
  chats       ChatUsuario[]  // Relación con tabla intermedia
  mensajes    Mensaje[]      // Relación con mensajes
}

model Pelicula {
  id         Int       @id @default(autoincrement())
  titulo     String
  genero     String
  descripcion String
  fechaestreno Int
  duracion    String
  actores    String
  valoracion  Int
  imagen     String?    @db.Text   // <— aquí // URL o path de imagen
  reviews    Review[]
}

model Review {
  id         Int       @id @default(autoincrement())
  userId     Int
  peliculaId Int
  comentario String
  rating     Int

  user       User      @relation(fields: [userId], references: [id])
  pelicula   Pelicula  @relation(fields: [peliculaId], references: [id])
  createdAt  DateTime @default(now())
}


model Chat {
  id          Int             @id @default(autoincrement()) @map("ID_Chat")
  fechaCreacion DateTime     @default(now())                @map("Fecha_Creacion")
  participantes ChatUsuario[]
  mensajes     Mensaje[]

  @@map("chat")
}

model ChatUsuario {
  chatId     Int  @map("ID_Chat")
  usuarioId  Int  @map("ID_Usuario")

  chat       Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  usuario    User @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@id([chatId, usuarioId])
  @@map("chat_usuario")
}

model Mensaje {
  id             Int      @id @default(autoincrement()) @map("ID_Mensaje")
  chatId         Int      @map("ID_Chat")
  usuarioId      Int      @map("ID_Usuario")
  textoMensaje   String   @db.Text                      @map("TextoMensaje")
  horaFecha      DateTime @default(now())               @map("HoraFecha_Mensaje")

  chat           Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  usuario        User     @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("mensaje")
}
